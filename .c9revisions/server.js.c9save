{"ts":1339022290586,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var http = require('http'),\n    url = require('url'),\n    nodeStatic = require('node-static');\n\nvar staticFileServer = new(nodeStatic.Server)();\n\nhttp.createServer(function (req, res) {\n    console.log(url.parse(req.url));\n    req.addListener('end', function () {\n        //\n        // Serve files!\n        //\n        staticFileServer.serve(req, res);\n    });\n}).listen(process.env.PORT);"]],"start1":0,"start2":0,"length1":0,"length2":388}]],"length":388}
{"contributors":[],"silentsave":false,"ts":1339775164233,"patch":[[{"diffs":[[0,"var "],[-1,"http"],[1,"ioClient"],[0," = requi"]],"start1":0,"start2":0,"length1":16,"length2":20},{"diffs":[[0,"re('"],[-1,"http'),\n    url = require('url'),\n    nodeStatic = require('node-static');\n\nvar staticFileServer = new(nodeStatic.Server)();\n\nhttp.createServer("],[1,"socket.io-client'),\n    //chatServers = [\"http://agc.abhishekmunie.com\", \"http://agc1.abhishekmunie.com\",\n    //\"http://agc2.abhishekmunie.com\", \"http://agc3.abhishekmunie.com\"],\n    distributionServers = [\"http://agcmd1.herokuapp.com\", \"http://agcmd2.herokuapp.com\", \"http://agcmd3.herokuapp.com\"];\nvar distributionLen = distributionServers.length,\n    distributionSockets = [],\n    groups = {},\n    users = {};\n\nfunction generateDistributionSockets(group) {\n    var distributionSockets = [];\n    for (var len = distributionLen; len;) {\n        var ds = new ioClient.Socket(distributionServers[--len]);\n        ds.connect();\n        ds.on('createGroup', function(group) {\n            createGroup(group);\n        });\n        ds.on('message', function(data) {\n            groups[group].socket.emit(\"message\", data);\n        });\n        distributionSockets[len] = ds;\n    }\n    return distributionSockets;\n}\ndistributionSockets = generateDistributionSockets(\"\");\n\nfunction distributeMessage(sockets, data) {\n    sockets[Math.floor(Math.random() * distributionLen)].emit(\"message\", data);\n}\n\nfunction addGroupToUser(name, group, socket) {\n    users[name].sockets[group] = socket;\n    socket.on('message', function(data) {\n        var messageData = {\n            name: name,\n            data: data\n        };\n        socket.namespace.emit(\"message\", messageData);\n        distributeMessage(groups[group].distributionSockets, messageData);\n    });\n}\n\n"],[0,"func"]],"start1":20,"start2":20,"length1":152,"length2":1454},{"diffs":[[0,"ion "],[-1,"(req, res) {\n    console.log(url.parse(req.url));\n    req.addListener('end', function () {\n        //\n        // Serve files!\n        //\n        staticFileServer.serve(req, res);\n    });\n}).listen(process.env.PORT"],[1,"createGroup(group) {\n    if ((group.length == 1) || groups[group]) return;\n    groups[group] = {\n        distributionSockets: generateDistributionSockets(group),\n        socket: io.of(group).on('connection', function(socket) {\n            socket.get('name', function(err, name) {\n                addGroupToUser(name, group, socket);\n            });\n        })\n    };\n}\n\nfunction generateGroup(group) {\n    createGroup(group);\n    distributionSockets[Math.floor(Math.random() * distributionLen)].emit('createGroup', {\n        group: group\n    });\n}\nvar app = require('h5bp').server(require('express'), {\n    root: __dirname + \"/\",\n    maxAge: 1000 * 60 * 60\n});\napp.get('*', function(req, res) {\n    /*res.writeHead(404, {\n        \"Content-Type\": \"text/html\"\n    });*/\n    res.sendfile(__dirname + '/404.html');\n});\nvar io = require('socket.io').listen(app);\napp.listen(process.env.C9_PORT || process.env.PORT || process.env.VCAP_APP_PORT || process.env.VMC_APP_PORT || 1337 || 8001);\nio.configure(function() {\n/* //Production Settings\n    io.enable('browser client minification');\n    io.enable('browser client etag');\n    io.enable('browser client gzip');\n    io.set('log level', 1);\n    io.set('transports', ['websocket', 'htmlfile', 'xhr-polling', 'jsonp-polling', 'flashsocket']);*/\n    io.set(\"polling duration\", 10);\n    io.set('authorization', function(handshakeData, callback) {\n        callback(null, true); // error first callback style \n    });\n});\nio.sockets.on('connection', function(socket) {\n    var user = {\n        name: undefined,\n        sockets: {\n            root: socket\n        }\n    };\n    socket.on('setName', function(name, final, response) {\n        if (user[name]) {\n            response({\n                name: name,\n                available: false\n            });\n        }\n        else {\n            if (final) {\n                socket.set('name', name, function() {});\n                user.name = name;\n                users[name] = user;\n            }\n            response({\n                name: name,\n                available: true\n            });\n        }\n    });\n    socket.on('createGroup', function(group) {\n        createGroup(group);\n    });\n    socket.on('generateGroup', function(group) {\n        generateGroup(group);\n    });\n    socket.on('disconnect', function() {});\n    socket.namespace.emit(\"message\", {\n        name: \"server\",\n        message: \"connected new member\"\n    });\n});\ngenerateGroup(\"/\""],[0,");"]],"start1":1475,"start2":1475,"length1":219,"length2":2455}]],"length":3930,"saved":false}
{"ts":1339775222661,"patch":[[{"diffs":[[0,") {\n"],[-1,"    /*res.writeHead(404, {\n        \"Content-Type\": \"text/html\"\n    });*/\n"],[0,"    "]],"start1":2170,"start2":2170,"length1":81,"length2":8}]],"length":3857,"saved":false}
{"contributors":[],"silentsave":false,"ts":1341058170809,"patch":[[{"diffs":[[1,"var HOST = null; // localhost\nvar PORT = 8001;\n\n// when the daemon started\nvar starttime = (new Date()).getTime();\n\nvar mem = process.memoryUsage();\n// every 10 seconds poll for the memory.\nsetInterval(function() {\n    mem = process.memoryUsage();\n}, 10 * 1000);\n\n\nvar fu = require(\"./fu\"),\n    sys = require(\"sys\"),\n    url = require(\"url\"),\n    qs = require(\"querystring\");\n\nvar MESSAGE_BACKLOG = 200,\n    SESSION_TIMEOUT = 60 * 1000;\n\nvar channel = new function() {\n    var messages = [],\n        callbacks = [];\n\n    this.appendMessage = function(nick, type, text) {\n        var m = {\n            nick: nick,\n            type: type // \"msg\", \"join\", \"part\"\n            ,\n            text: text,\n            timestamp: (new Date()).getTime()\n        };\n\n        switch (type) {\n        case \"msg\":\n            sys.puts(\"<\" + nick + \"> \" + text);\n            break;\n        case \"join\":\n            sys.puts(nick + \" join\");\n            break;\n        case \"part\":\n            sys.puts(nick + \" part\");\n            break;\n        }\n\n        messages.push(m);\n\n        while (callbacks.length > 0) {\n            callbacks.shift().callback([m]);\n        }\n\n        while (messages.length > MESSAGE_BACKLOG)\n        messages.shift();\n    };\n\n    this.query = function(since, callback) {\n        var matching = [];\n        for (var i = 0; i < messages.length; i++) {\n            var message = messages[i];\n            if (message.timestamp > since) matching.push(message)\n        }\n\n        if (matching.length != 0) {\n            callback(matching);\n        }\n        else {\n            callbacks.push({\n                timestamp: new Date(),\n                callback: callback\n            });\n        }\n    };\n\n    // clear old callbacks\n    // they can hang around for at most 30 seconds.\n    setInterval(function() {\n        var now = new Date();\n        while (callbacks.length > 0 && now - callbacks[0].timestamp > 30 * 1000) {\n            callbacks.shift().callback([]);\n        }\n    }, 3000);\n};\n\nvar sessions = {};\n\nfunction createSession(nick) {\n    if (nick.length > 50) return null;\n    if (/[^\\w_\\-^!]/.exec(nick)) return null;\n\n    for (var i in sessions) {\n        var session = sessions[i];\n        if (session && session.nick === nick) return null;\n    }\n\n    var session = {\n        nick: nick,\n        id: Math.floor(Math.random() * 99999999999).toString(),\n        timestamp: new Date(),\n\n        poke: function() {\n            session.timestamp = new Date();\n        },\n\n        destroy: function() {\n            channel.appendMessage(session.nick, \"part\");\n            delete sessions[session.id];\n        }\n    };\n\n    sessions[session.id] = session;\n    return session;\n}\n\n// interval to kill off old sessions\nsetInterval(function() {\n    var now = new Date();\n    for (var id in sessions) {\n        if (!sessions.hasOwnProperty(id)) continue;\n        var session = sessions[id];\n\n        if (now - session.timestamp > SESSION_TIMEOUT) {\n            session.destroy();\n        }\n    }\n}, 1000);\n\nfu.listen(Number(process.env.PORT || PORT), HOST);\n\nfu.get(\"/\", fu.staticHandler(\"index.html\"));\nfu.get(\"/style.css\", fu.staticHandler(\"style.css\"));\nfu.get(\"/client.js\", fu.staticHandler(\"client.js\"));\nfu.get(\"/jquery-1.2.6.min.js\", fu.staticHandler(\"jquery-1.2.6.min.js\"));\n\n\nfu.get(\"/who\", function(req, res) {\n    var nicks = [];\n    for (var id in sessions) {\n        if (!sessions.hasOwnProperty(id)) continue;\n        var session = sessions[id];\n        nicks.push(session.nick);\n    }\n    res.simpleJSON(200, {\n        nicks: nicks,\n        rss: mem.rss\n    });\n});\n\nfu.get(\"/join\", function(req, res) {\n    var nick = qs.parse(url.parse(req.url).query).nick;\n    if (nick == null || nick.length == 0) {\n        res.simpleJSON(400, {\n            error: \"Bad nick.\"\n        });\n        return;\n    }\n    var session = createSession(nick);\n    if (session == null) {\n        res.simpleJSON(400, {\n            error: \"Nick in use\"\n        });\n        return;\n    }\n\n    //sys.puts(\"connection: \" + nick + \"@\" + res.connection.remoteAddress);\n    channel.appendMessage(session.nick, \"join\");\n    res.simpleJSON(200, {\n        id: session.id,\n        nick: session.nick,\n        rss: mem.rss,\n        starttime: starttime\n    });\n});\n\nfu.get(\"/part\", function(req, res) {\n    var id = qs.parse(url.parse(req.url).query).id;\n    var session;\n    if (id && sessions[id]) {\n        session = sessions[id];\n        session.destroy();\n    }\n    res.simpleJSON(200, {\n        rss: mem.rss\n    });\n});\n\nfu.get(\"/recv\", function(req, res) {\n    if (!qs.parse(url.parse(req.url).query).since) {\n        res.simpleJSON(400, {\n            error: \"Must supply since parameter\"\n        });\n        return;\n    }\n    var id = qs.parse(url.parse(req.url).query).id;\n    var session;\n    if (id && sessions[id]) {\n        session = sessions[id];\n        session.poke();\n    }\n\n    var since = parseInt(qs.parse(url.parse(req.url).query).since, 10);\n\n    channel.query(since, function(messages) {\n        if (session) session.poke();\n        res.simpleJSON(200, {\n            messages: messages,\n            rss: mem.rss\n        });\n    });\n});\n\nfu.get(\"/send\", function(req, res) {\n    var id = qs.parse(url.parse(req.url).query).id;\n    var text = qs.parse(url.parse(req.url).query).text;\n    \n    var session = sessions[id];\n    if (!session || !text) {\n        res.simpleJSON(400, {\n            error: \"No such session id\"\n        });\n        return;\n    }\n\n    session.poke(;\n\n    channel.appendMessage(session.nick, \"msg\", text);\n    res.simpleJSON(200, {\n        rss: mem.rss\n    });\n});"]],"start1":0,"start2":0,"length1":0,"length2":5599}]],"length":5599,"saved":false}
{"contributors":[],"silentsave":false,"ts":1341058179251,"patch":[[{"diffs":[[0,"on.poke("],[1,")"],[0,";\n"],[-1,""],[0,"\n    cha"]],"start1":5476,"start2":5476,"length1":18,"length2":19},{"diffs":[[0,"});\n"],[1,""],[0,"});"],[-1,"var ioClient = require('socket.io-client'),\n    //chatServers = [\"http://agc.abhishekmunie.com\", \"http://agc1.abhishekmunie.com\",\n    //\"http://agc2.abhishekmunie.com\", \"http://agc3.abhishekmunie.com\"],\n    distributionServers = [\"http://agcmd1.herokuapp.com\", \"http://agcmd2.herokuapp.com\", \"http://agcmd3.herokuapp.com\"];\nvar distributionLen = distributionServers.length,\n    distributionSockets = [],\n    groups = {},\n    users = {};\n\nfunction generateDistributionSockets(group) {\n    var distributionSockets = [];\n    for (var len = distributionLen; len;) {\n        var ds = new ioClient.Socket(distributionServers[--len]);\n        ds.connect();\n        ds.on('createGroup', function(group) {\n            createGroup(group);\n        });\n        ds.on('message', function(data) {\n            groups[group].socket.emit(\"message\", data);\n        });\n        distributionSockets[len] = ds;\n    }\n    return distributionSockets;\n}\ndistributionSockets = generateDistributionSockets(\"\");\n\nfunction distributeMessage(sockets, data) {\n    sockets[Math.floor(Math.random() * distributionLen)].emit(\"message\", data);\n}\n\nfunction addGroupToUser(name, group, socket) {\n    users[name].sockets[group] = socket;\n    socket.on('message', function(data) {\n        var messageData = {\n            name: name,\n            data: data\n        };\n        socket.namespace.emit(\"message\", messageData);\n        distributeMessage(groups[group].distributionSockets, messageData);\n    });\n}\n\nfunction createGroup(group) {\n    if ((group.length == 1) || groups[group]) return;\n    groups[group] = {\n        distributionSockets: generateDistributionSockets(group),\n        socket: io.of(group).on('connection', function(socket) {\n            socket.get('name', function(err, name) {\n                addGroupToUser(name, group, socket);\n            });\n        })\n    };\n}\n\nfunction generateGroup(group) {\n    createGroup(group);\n    distributionSockets[Math.floor(Math.random() * distributionLen)].emit('createGroup', {\n        group: group\n    });\n}\nvar app = require('h5bp').server(require('express'), {\n    root: __dirname + \"/\",\n    maxAge: 1000 * 60 * 60\n});\napp.get('*', function(req, res) {\n    res.sendfile(__dirname + '/404.html');\n});\nvar io = require('socket.io').listen(app);\napp.listen(process.env.C9_PORT || process.env.PORT || process.env.VCAP_APP_PORT || process.env.VMC_APP_PORT || 1337 || 8001);\nio.configure(function() {\n/* //Production Settings\n    io.enable('browser client minification');\n    io.enable('browser client etag');\n    io.enable('browser client gzip');\n    io.set('log level', 1);\n    io.set('transports', ['websocket', 'htmlfile', 'xhr-polling', 'jsonp-polling', 'flashsocket']);*/\n    io.set(\"polling duration\", 10);\n    io.set('authorization', function(handshakeData, callback) {\n        callback(null, true); // error first callback style \n    });\n});\nio.sockets.on('connection', function(socket) {\n    var user = {\n        name: undefined,\n        sockets: {\n            root: socket\n        }\n    };\n    socket.on('setName', function(name, final, response) {\n        if (user[name]) {\n            response({\n                name: name,\n                available: false\n            });\n        }\n        else {\n            if (final) {\n                socket.set('name', name, function() {});\n                user.name = name;\n                users[name] = user;\n            }\n            response({\n                name: name,\n                available: true\n            });\n        }\n    });\n    socket.on('createGroup', function(group) {\n        createGroup(group);\n    });\n    socket.on('generateGroup', function(group) {\n        generateGroup(group);\n    });\n    socket.on('disconnect', function() {});\n    socket.namespace.emit(\"message\", {\n        name: \"server\",\n        message: \"connected new member\"\n    });\n});\ngenerateGroup(\"/\");"]],"start1":5593,"start2":5593,"length1":3864,"length2":7}]],"length":5600,"saved":false}
