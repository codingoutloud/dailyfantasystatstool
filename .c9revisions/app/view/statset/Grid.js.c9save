{"ts":1338896653488,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Ext.define('DFST.view.statset.Grid', {\n    extend: 'Ext.grid.Panel',\n\talias: 'widget.statsetgrid',\n\n\tcls: 'statset-grid',\n\tdisabled: false,\n\n    requires: ['Ext.toolbar.Toolbar'],\n    \n    border: false,    \n    \n    dockedItems: [{\n        xtype: 'pagingtoolbar',\n        dock: 'bottom',\n\t    store: 'Stats',\n        displayInfo: true\n    }],\n    \n\tinitComponent: function() {\n\t\tExt.apply(this, {\n\t\t    store: 'Stats',\n\n\t\t\tcolumns: {\n                defaults: {\n                    align: 'right',\n                    style: 'text-align:center',\n                    width: 40\n                },\n                items: [{\n                    text: 'Name',\n                    dataIndex: 'name',\n                    align: 'left',\n                    width: 150,\n                    renderer: this.formatName\n                },{\n                    text: 'Team',\n                    dataIndex: 'team',\n                    align: 'left',\n                    width: 60,\n                    renderer: this.formatTeam\n                },{\n                    text: 'OPP',\n                    dataIndex: 'opp',\n                    align: 'left',\n                    width: 60,\n                    renderer: this.formatOpponent\n                },{\n                    text: 'Pos',\n                    dataIndex: 'spos',\n                    align: 'left'\n                },{\n                    text: 'B-Order',\n                    dataIndex: 'border',\n                    renderer: this.formatBattingOrder\n                },{\n                    text: 'G',\n                    dataIndex: 'ng'\n                },{\n                    text: '1B',\n                    dataIndex: 'x1b',\n                    hidden: true\n                },{\n                    text: '2B',\n                    dataIndex: 'x2b',\n                    hidden: true\n                },{\n                    text: '3B',\n                    dataIndex: 'x3b',\n                    hidden: true\n                },{\n                    text: 'HR',\n                    dataIndex: 'hr',\n                    hidden: true\n                },{\n                    text: 'R',\n                    dataIndex: 'r',\n                    hidden: true\n                },{\n                    text: 'RBI',\n                    dataIndex: 'rbi',\n                    hidden: true\n                },{\n                    text: 'BB',\n                    dataIndex: 'bb',\n                    hidden: true\n                },{\n                    text: 'SB',\n                    dataIndex: 'sb',\n                    hidden: true\n                },{\n                    text: 'HBP',\n                    dataIndex: 'hbp',\n                    hidden: true\n                },{\n                    text: 'OUT',\n                    dataIndex: 'o',\n                    hidden: true\n               },{\n                    text: 'W',\n                    dataIndex: 'w',\n                    hidden: true\n                },{\n                    text: 'W/G',\n                    dataIndex: 'aw',\n                    hidden: true,\n                    renderer: Ext.util.Format.numberRenderer('0.00')\n                },{\n                    text: 'ER',\n                    dataIndex: 'er',\n                    hidden: true\n                },{\n                    text: 'ER/G',\n                    dataIndex: 'aer',\n                    hidden: true,\n                    renderer: Ext.util.Format.numberRenderer('0.00')\n                },{\n                    text: 'SO',\n                    dataIndex: 'so',\n                    hidden: true\n                },{\n                    text: 'SO/G',\n                    dataIndex: 'aso',\n                    hidden: true,\n                    renderer: Ext.util.Format.numberRenderer('0.00')                \n                },{\n                    text: 'IP',\n                    dataIndex: 'ip',\n                    hidden: true\n                },{\n                    text: 'IP/G',\n                    dataIndex: 'aip',\n                    hidden: true\n                },{\n                    text: 'Avg Pts',\n                    dataIndex: 'afp',\n                    width: 60,\n                    renderer: Ext.util.Format.numberRenderer('0.00')\n                },{\n                    text: '$',\n                    dataIndex: 'sal',\n                    width: 75,\n                    renderer: this.moneyRenderer\n                },{\n                    text: '$/Pt',\n                    dataIndex: 'cpp',\n                    width: 75,\n                    renderer: this.costPerPointRenderer\n                }\n                ]\n\t\t\t}\n\t\t});\n\n\t\tthis.callParent(arguments);\n\t},\n\n    formatBattingOrder: function(value, p, record) {\n        if (value === 0) {\n            return \"\";\n        } else if (value === 10) { //pitcher\n            return \"N/A\";\n        } else {\n            return value;\n        }\n    },\n    \n    moneyRenderer: function(value, p, record) {\n        return Ext.util.Format.currency(value, '$', -1); \n    },\n    \n    /**\n     * Cost Per Point renderer\n     * @private\n     */\n    costPerPointRenderer: function(value, p, record) {\n        if (value === 999999) {\n            return \"&infin;\";\n        } else {\n            return this.moneyRenderer(value, p, record);\n        }\n    },\n    \n    /**\n     * Name renderer\n     * @private\n     */\n\tformatName: function(value, p, record) {\n        var isInjured = record.data.inj;\n        var isProbable = record.data.pp;\n        value = '<a href=\"http://mlb.mlb.com/team/player.jsp?player_id=' + \n            record.get('id') + '\" title=\"Click to view on MLB.com\" target=\"mlb\">' + value + '</a>';\n        if (isInjured) {\n            return value + '<img src=\"images/16px-Injury_icon_2.svg.png\" class=\"icon-indicator\"/>';\n        } else if (isProbable) {\n            return value + '<img src=\"images/starting_pitcher.png\" class=\"icon-indicator\"/>';\n        } else {\n            return value;\n        }\n\t},\n    \n\t/**\n     * Team renderer\n     * @private\n     */\n\tformatTeam: function(value, p, record) {\n        var isHome = record.data.isHome;\n        return (isHome ? '@' + value : value).toUpperCase();\n\t},\n    \n    /**\n     * Opponent renderer\n     * @private\n     */\n\tformatOpponent: function(value, p, record) {\n        var isHome = record.data.isHome;\n        return (isHome ? record.data.opp : '@' + record.data.opp).toUpperCase();\n\t}\n    \n});\n\n"]],"start1":0,"start2":0,"length1":0,"length2":6386}]],"length":6386}
