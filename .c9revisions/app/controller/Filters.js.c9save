{"ts":1338846257928,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Ext.define('DFST.controller.Filters', {\n    extend: 'Ext.app.Controller',\n\n    stores: ['Stats', 'PlayerStats', 'SiteDetails', 'Games'],\n    models: ['StatSet'],\n    views: ['filter.List'],\n    \n    refs: [\n        {ref: 'dateFilter', selector: 'filterlist datefield'},\n        {ref: 'probablesFilter', selector: 'filterlist checkbox#probables'},\n        {ref: 'injuredFilter', selector: 'filterlist checkbox#injured'},\n        {ref: 'positionFilters', selector: 'filterlist fieldcontainer#positions'},\n        {ref: 'salRangeFilter', selector: 'filterlist multislider#salRange'},\n        {ref: 'cppRangeFilter', selector: 'filterlist multislider#cppRange'},\n        {ref: 'afpRangeFilter', selector: 'filterlist multislider#afpRange'},\n        {ref: 'ngRangeFilter', selector: 'filterlist multislider#ngRange'},\n        {ref: 'notInLineupFilter', selector: 'filterlist checkbox#notinlineup'},\n        {ref: 'gamesFilters', selector: 'filterlist fieldcontainer#games'}\n    ],\n    \n    // At this point things haven't rendered yet since init gets called on controllers before the launch function\n    // is executed on the Application\n    init: function() {\n        \n        this.control({\n            'filterlist datefield':{\n                change: this.changeDate\n            },\n            'filterlist checkbox#probables':{\n                change: this.changeProbables\n            },\n            'filterlist checkbox#injured':{\n                change: this.changeInjured\n            },\n            'filterlist checkbox#notinlineup':{\n                change: this.changeByLineup\n            },\n            'filterlist fieldcontainer#battingorderFilter checkbox':{\n                change: this.changeLineupSpots\n            },\n            'filterlist fieldcontainer#positions checkbox':{\n                change: this.changePositions\n            },\n            'filterlist fieldcontainer radio':{\n                change: this.changeScoring\n            },\n            'filterlist splitbutton menu':{\n                click: this.changePositionGroups\n            },\n            'filterlist multislider':{\n                changecomplete: this.changeRange\n            },\n            'filterlist fieldcontainer#games button':{\n                click: this.changeGames\n            }/*, use a go button to change the filter on games, instead of this\n            'filterlist fieldcontainer#games checkbox':{\n                change: this.changeGames\n            }*/          \n        });\n    },\n\n    changeGames: function(checkbox, newValue, oldValue, options) {\n        /*\n        This next line shouldn't be needed work but is a work-around for the following bug, still not fixed in 4.1.0:\n        http://www.sencha.com/forum/showthread.php?171525-suspendEvents-did-not-affect-to-Ext.app.Controller.control                \n        */\n        if (checkbox.eventsSuspended) return;\n        \n        var statsStore = this.getStatsStore();\n        var gameCheckboxes = Ext.ComponentQuery.query('filterlist fieldcontainer#games checkbox');\n        var value = '';\n        var allChecked = true;\n        for (var i=0; i<gameCheckboxes.length; i++) {\n            var checkbox2 = gameCheckboxes[i];\n            \n            if (checkbox2.getRawValue()) { //is checked\n                if (value !== '') {\n                    value += ':';\n                }\n                var gameId = checkbox2.inputValue;\n                var team1 = this.getTeamCode(gameId.substring(11, 14));\n                var team2 = this.getTeamCode(gameId.substring(18, 21));\n                value += team1 + \":\" + team2;\n            } else {\n                allChecked = false;\n            }\n        }\n        if (allChecked) {\n            statsStore.filters.removeAtKey('team');\n            statsStore.filter();\n        } else {\n            statsStore.filter([{id:'team', property: 'team', value: value}]);\n        }\n    },\n        \n    changeRange: function(slider, newValue, thumb, options) {\n        var filterId = slider.id.substring(0, slider.id.indexOf('Range'));\n        var statsStore = this.getStatsStore();\n        var min = slider.thumbs[0].value;\n        var max = slider.thumbs[1].value;\n        if (min === slider.minValue && max === slider.maxValue) {\n            statsStore.filters.removeAtKey(filterId);\n            statsStore.filter();\n            return;\n        }\n        statsStore.filter([{id: filterId, property: filterId, value: min + '|' + max}]);\n    },\n\n    changeDate: function(datefield, newValue, oldValue, options) {\n        var statsStore = this.getStatsStore();\n        statsStore.filter([{id: 'gameDate', property: 'gameDate', value: newValue.toJSON()}]);\n        var gamesStore = this.getGamesStore();\n        gamesStore.filter([{id:'gameDate', property: 'gameDate', value: newValue.toJSON()}]);\n    },\n    \n    changeProbables: function(checkbox, newValue, oldValue, options) {\n        /*\n        This next line shouldn't be needed work but is a work-around for the following bug, still not fixed in 4.1.0:\n        http://www.sencha.com/forum/showthread.php?171525-suspendEvents-did-not-affect-to-Ext.app.Controller.control                \n        */\n        if (checkbox.eventsSuspended) return;\n        \n        var statsStore = this.getStatsStore();\n        statsStore.filter([{id:'probables', property: 'probables', value: newValue}]);\n    },\n\n    changeInjured: function(checkbox, newValue, oldValue, options) {\n        /*\n        This next line shouldn't be needed work but is a work-around for the following bug, still not fixed in 4.1.0:\n        http://www.sencha.com/forum/showthread.php?171525-suspendEvents-did-not-affect-to-Ext.app.Controller.control                \n        */\n        if (checkbox.eventsSuspended) return;\n        \n        var statsStore = this.getStatsStore();\n        if (newValue) {\n            statsStore.filter([{id:'inj', property: 'inj', value: false}]);\n        } else {\n            statsStore.filters.removeAtKey('inj');\n            statsStore.filter();\n            return;\n        }\n    },\n    \n    /* Hide or show players that are known to be in or out of the day's starting lineup */\n    changeByLineup: function(checkbox, newValue, oldValue, options) {\n        /*\n        This next line shouldn't be needed work but is a work-around for the following bug, still not fixed in 4.1.0:\n        http://www.sencha.com/forum/showthread.php?171525-suspendEvents-did-not-affect-to-Ext.app.Controller.control                \n        */\n        if (checkbox.eventsSuspended) return;\n\n        this.changeLineupSpots(checkbox, newValue, oldValue, options);\n        return;\n        var statsStore = this.getStatsStore();\n        if (newValue) {\n            var value = '1:2:3:4:5:6:7:8:9:10'; //all spots in lineup\n            statsStore.filter([{id:'border', property: 'border', value: value}]);\n        } else {\n            statsStore.filters.removeAtKey('border');\n            statsStore.filter();\n            return;\n        }\n    },\n    \n    /* Hide or show players that are batting in a particular spot in the lineup (1-9) */\n    changeLineupSpots: function(checkbox, newValue, oldValue, options) {\n        /*\n        This next line shouldn't be needed work but is a work-around for the following bug, still not fixed in 4.1.0:\n        http://www.sencha.com/forum/showthread.php?171525-suspendEvents-did-not-affect-to-Ext.app.Controller.control                \n        */\n        if (checkbox.eventsSuspended) return;\n\n        var statsStore = this.getStatsStore();\n        var bOrderCheckboxes = Ext.ComponentQuery.query('filterlist fieldcontainer#battingorderFilter checkbox');\n        var filteringOutNonStarters = this.getNotInLineupFilter().getRawValue();      \n        var value = filteringOutNonStarters ? '' : 0;\n        for (var i=0; i<bOrderCheckboxes.length; i++) {\n            var checkbox2 = bOrderCheckboxes[i];\n            \n            if (checkbox2.getRawValue()) { //is checked\n                if (value !== '') {\n                    value += ':';\n                }\n                value += checkbox2.inputValue;\n            }\n        }\n        if (value !== '') {\n            value += ':';\n        }\n        value += \"10\"; // always include pitcher\n        \n        if (value === '0:1:2:3:4:5:6:7:8:9:10') {\n            statsStore.filters.removeAtKey('border');\n            statsStore.filter();\n            return;\n        } \n        statsStore.filter([{id:'border', property: 'border', value: value}]);\n    },\n    \n    changePositions: function(checkbox, newValue, oldValue, options) {\n        /*\n        This next line shouldn't be needed work but is a work-around for the following bug, still not fixed in 4.1.0:\n        http://www.sencha.com/forum/showthread.php?171525-suspendEvents-did-not-affect-to-Ext.app.Controller.control                \n        */\n        if (checkbox.eventsSuspended) return;\n        \n        var statsStore = this.getStatsStore();\n        var positionCheckboxes = Ext.ComponentQuery.query('filterlist fieldcontainer#positions checkbox');\n        var value = '';\n        for (var i=0; i<positionCheckboxes.length; i++) {\n            var checkbox2 = positionCheckboxes[i];\n            \n            if (checkbox2.getRawValue()) { //is checked\n                if (value !== '') {\n                    value += ':';\n                }\n                value += checkbox2.inputValue;\n            }\n        }\n        statsStore.filter([{id:'spos', property: 'spos', value: value}]);\n    },\n    \n    changePositionGroups: function(menu, menuItem, e, options) {\n        var positionCheckboxes = Ext.ComponentQuery.query('filterlist fieldcontainer#positions checkbox');\n        var len = positionCheckboxes.length;\n        var option = menuItem.text;\n        var checkbox, i, pos;\n        if (option === 'none') {\n            for (i=0; i<len; i++) {\n                checkbox = positionCheckboxes[i];\n                checkbox.suspendEvents(false);\n                checkbox.setValue(false);\n                checkbox.resumeEvents();                \n            }\n        } else if (option === 'all') {\n            for (i=0; i<len; i++) {\n                checkbox = positionCheckboxes[i];\n                checkbox.suspendEvents(false);\n                checkbox.setValue(true);\n                checkbox.resumeEvents();                \n            }\n        } else if (option === 'pitchers') {\n            for (i=0; i<len; i++) {\n                checkbox = positionCheckboxes[i];                \n                checkbox.suspendEvents(false);\n                if (checkbox.inputValue === 'P' || checkbox.inputValue === 'SP'){                 \n                    checkbox.setValue(true);\n                } else {\n                    checkbox.setValue(false);\n                }\n                checkbox.resumeEvents();                \n            }\n        } else if (option === 'outfielders') {\n            for (i=0; i<len; i++) {\n                checkbox = positionCheckboxes[i];                \n                checkbox.suspendEvents(false);\n                pos = checkbox.inputValue;\n                if (pos === 'LF' || pos === 'RF' || pos === 'CF' || pos === 'OF' ){                 \n                    checkbox.setValue(true);\n                } else {\n                    checkbox.setValue(false);\n                }\n                checkbox.resumeEvents();                \n            }\n        } else if (option === 'infielders') {\n            for (i=0; i<len; i++) {\n                checkbox = positionCheckboxes[i];                \n                checkbox.suspendEvents(false);\n                pos = checkbox.inputValue;\n                if (pos === '1B' || pos === '2B' || pos === '3B' || pos === 'SS'){                 \n                    checkbox.setValue(true);\n                } else {\n                    checkbox.setValue(false);\n                }\n                checkbox.resumeEvents();                \n            }\n        }\n        this.changePositions(checkbox, false, false, null);\n    },\n    \n    changeScoring: function(radiobutton, newValue, oldValue, options) {\n        if (newValue) {\n            var siteDetailsStore = this.getSiteDetailsStore();\n            siteDetailsStore.filter([{id:'siteId', property: 'siteId', value: radiobutton.inputValue}]);\n            siteDetailsStore.load();\n        }\n    },\n\n    onScoringChanged: function(store, records, wasSuccessful, options) {\n        if (records.length === 0) return;\n        var site = records[0];\n        \n        // Change the list of position filters\n        // All positions will reset to checked\n        var posContainer = this.getPositionFilters();\n        posContainer.removeAll(true);\n        var positions = site.get('pos');\n        for (var i=0, mlen=positions.length; i < mlen; i++) {\n            var pos = positions[i];\n            posContainer.add(new Ext.form.field.Checkbox({\n                        boxLabel: pos,\n                        name: 'pos',\n                        checked: true,\n                        inputValue: pos\n                    }));\n        }\n        \n        // change the values for all value range filters\n        var salFilter = this.getSalRangeFilter();\n        salFilter.setMinValue(site.get('salmin'));\n        salFilter.setMaxValue(site.get('salmax'));\n        salFilter.increment = site.get('salstep');\n        salFilter.setValue(0, site.get('salmin'));\n        salFilter.setValue(1, site.get('salmax'));\n\n        var cppFilter = this.getCppRangeFilter();\n        cppFilter.setMinValue(site.get('cppmin'));\n        cppFilter.setMaxValue(site.get('cppmax'));\n        cppFilter.increment = site.get('cppstep');\n        cppFilter.setValue(0, site.get('cppmin'));\n        cppFilter.setValue(1, site.get('cppmax'));\n\n        var afpFilter = this.getAfpRangeFilter();\n        afpFilter.setMinValue(site.get('afpmin'));\n        afpFilter.setMaxValue(site.get('afpmax'));\n        afpFilter.increment = site.get('afpstep');\n        afpFilter.setValue(0, site.get('afpmin'));\n        afpFilter.setValue(1, site.get('afpmax'));\n        \n/*        \n        // set all other filters to default values\n        var probablesFilter = this.getProbablesFilter();\n        probablesFilter.suspendEvents(false);\n        probablesFilter.setValue(true);\n        probablesFilter.resumeEvents();    \n        var injuredFilter = this.getInjuredFilter();\n        injuredFilter.suspendEvents(false);\n        injuredFilter.setValue(false);\n        injuredFilter.resumeEvents();\n        var ngRangeFilter = this.getNgRangeFilter();\n        ngRangeFilter.setValue(0, ngRangeFilter.minValue);\n        ngRangeFilter.setValue(1, ngRangeFilter.maxValue);\n        \n        // reset the filters for batting order\n        var notinlineupFilter = this.getNotInLineupFilter();\n        notinlineupFilter.suspendEvents(false);\n        notinlineupFilter.setValue(false);\n        notinlineupFilter.resumeEvents();\n        var bOrderCheckboxes = Ext.ComponentQuery.query('filterlist fieldcontainer#battingorderFilter checkbox');\n        for (i=0; i<bOrderCheckboxes.length; i++) {\n            var cb = bOrderCheckboxes[i];\n            cb.suspendEvents(false);\n            cb.setValue(true);\n            cb.resumeEvents();\n        }        \n*/        \n        // refresh player store\n        var statsStore = this.getStatsStore();\n        statsStore.filters.removeAtKey('pos');\n        statsStore.filters.removeAtKey('afp');\n        statsStore.filters.removeAtKey('cpp');\n        statsStore.filters.removeAtKey('sal');\n                \n        statsStore.filter([\n            {id: \"gameDate\", property: \"gameDate\", value: this.getDateFilter().value.toJSON()},\n            {id:'scoring', property: 'scoring', value: site.get('siteId')},\n            {id: 'probables', property: 'probables', value: this.getProbablesFilter().value}\n            ]);\n    },\n    \n    onGamesChanged: function(store, records, wasSuccessful, options) {\n        if (records.length === 0) return;\n        // Change the list of all games\n        // All games on a new date will reset to checked\n        var i, mlen, game, gameTime, alin, hlin, gameString;\n        var gameCheckboxes = Ext.ComponentQuery.query('filterlist fieldcontainer#games checkbox');\n        var len = gameCheckboxes.length;\n        var isNewDate = len === 0;\n        \n        // If the game date has not changed, keep track of already checked games\n        var checkedGames = {};\n        if (len > 0) { // yyyy_mm_dd\n            var gameDateFromFilter = Ext.Date.format(this.getDateFilter().value, 'Y_m_d');\n            var gameDateFromCheckboxes = gameCheckboxes[0].inputValue.substring(0,10);\n            if (gameDateFromFilter === gameDateFromCheckboxes) {\n                for (var i = 0; i < len; i++) {\n                    var item = gameCheckboxes[i];\n                    if (item.getValue()) { //is checked\n                        checkedGames[item.inputValue] = 1;\n                    }\n                }\n                isNewDate = false;\n            } else {\n                isNewDate = true;\n            }\n        }\n        \n        //Now, remove all existing games, and add em all back\n        var gamesContainer = this.getGamesFilters();\n        gamesContainer.removeAll(true);\n        for (i=0, mlen=records.length; i < mlen; i++) {\n            game = records[i];\n            gameTime = game.get('gtime');\n            gameTime = Ext.Date.parse(gameTime, 'MS');\n            gameTime = Ext.Date.format(gameTime, 'g:i a');\n            alin = game.get('alin') ? '*' : '';\n            hlin = game.get('hlin') ? '*' : '';\n            gameString = this.getTeamCode(game.get('away')) + \n                alin + ' @' + this.getTeamCode(game.get('home')) + \n                hlin + ' ' + gameTime;\n            var gameId = game.get('gid');\n            var isChecked = isNewDate ? true : checkedGames[gameId] === 1; // true on first load of games list\n            gamesContainer.add(new Ext.form.field.Checkbox({\n                        boxLabel: gameString.toUpperCase(),\n                        name: 'game',\n                        checked: isChecked,\n                        inputValue: gameId\n                    }));\n        }\n        gamesContainer.add(Ext.create('Ext.Button', {\n            text: 'Apply Game Filters',\n            id: 'gamesGo'\n        }));\n    },\n    \n    /* a team id is the 3 character identifier used by mlb;\n    a team code is a more recognizeable 2-3 character identifier used at many sites */\n    getTeamCode: function(teamId) {\n        switch (teamId.toUpperCase())\n        {\n            case \"ANA\":\n                return \"laa\";\n            case \"CHA\":\n                return \"cws\";\n            case \"CHN\":\n                return \"chc\";\n            case \"KCA\":\n                return \"kc\";\n            case \"LAN\":\n                return \"lad\";\n            case \"NYA\":\n                return \"nyy\";\n            case \"NYN\":\n                return \"nym\";\n            case \"SDN\":\n                return \"sd\";\n            case \"SFN\":\n                return \"sf\";\n            case \"TBA\":\n                return \"tb\";\n            case \"WAS\":\n                return \"wsh\";\n            default:\n                return teamId.toLowerCase();\n        }\n    },\n    \n    onLaunch: function() {\n        var host = 'http://localhost:49533';\n        if (location.hostname.indexOf('cloudapp.net') > 0) {\n            host = 'http://dfst.cloudapp.net';  //live azure\n        }\n        \n        // Set things up to update filters when we switch sites\n        var siteDetailsStore = this.getSiteDetailsStore();\n        siteDetailsStore.proxy.url = host + '/api/site/';\n        siteDetailsStore.filter([{id:'siteId', property: 'siteId', value: 'fd'}]);\n        siteDetailsStore.on('load', this.onScoringChanged, this);\n        siteDetailsStore.load();\n        \n        // Set things up to update games filters when we switch sites\n        var gamesStore = this.getGamesStore();\n        gamesStore.proxy.url = host + '/api/games/';\n        gamesStore.on('load', this.onGamesChanged, this);\n        gamesStore.filter([{id:'gameDate', property: 'gameDate', value: (new Date()).toJSON()}]);\n        \n        // Set up a timer to update the games store periodically, so we can\n        // show a visual indicator that the lineup is ready\n        var task = {\n            run: function(){\n                var gamesStore = this.getGamesStore();\n                gamesStore.load();\n            },\n            scope: this,\n            interval: 1000 * 60 // every 60 seconds\n        };\n        Ext.TaskManager.start(task);        \n    }\n    \n});\n"]],"start1":0,"start2":0,"length1":0,"length2":20536}]],"length":20536}
